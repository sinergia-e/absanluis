odoo.define('custom_invoice.models', function (require) {
"use strict";

var models = require('point_of_sale.models');
var core = require('web.core');
const PaymentScreen = require('point_of_sale.PaymentScreen');
const Registries = require('point_of_sale.Registries');
var _super_posmodel = models.PosModel.prototype;
var rpc    = require('web.rpc');
var QWeb = core.qweb;
var _t = core._t;

models.load_fields("res.company", ['regimen_fiscal_id', 'zip', 'street', 'street2', 'city', 'state_id', 'nombre_fiscal']);

models.PosModel = models.PosModel.extend({
    initialize: function (session, attributes) {
        // New code
        var partner_model = _.find(this.models, function(model){
            return model.model === 'res.partner';
        });
		partner_model.fields.push('street2');
		partner_model.fields.push('regimen_fiscal_id');

		//partner_model.fields.push('state_id.name');

        // Inheritance
        return _super_posmodel.initialize.call(this, session, attributes);
    },
});
// At POS Startup, load the states, and add them to the pos model
models.load_models([{
    model: 'res.country.state',
    fields: ['name','code','country_id'],
    // domain: function(self){ return [['country_id','=', self.company.country_id[0]]]; },
    loaded: function(self,states){
        self.states = states;
    },
	},
	{
        model: 'catalogo.regimen.fiscal',
        fields: ['id','description'],
        loaded: function(self,regimen_fiscal){
            self.regimen_fiscal = regimen_fiscal;
        },
    }
    ]);

var custom_invoice_posmodel_super = models.PosModel.prototype;
models.PosModel = models.PosModel.extend({
	push_and_invoice_order: function(order){
	 
		var self = this; 
		var invoice = $.Deferred();
		var invoiced=invoice.state()
		return custom_invoice_posmodel_super.push_and_invoice_order.apply(this, arguments).then(function () {
			return rpc.query({
	            model: 'pos.order',
	            method: 'get_invoice_information',
	            args: [order.get_name()],
	        }).then(function(res){
	        	order.invoice_information = res;
	        	var invoice = $.Deferred();
	    		var invoiced=invoice.state()
	    		return invoiced;		
	        });
			
        })
		return invoiced;		
	},
});	
        
         /*var invoiced = new $.Deferred(); 

        if(!order.get_client()){
            invoiced.reject({code:400, message:'Missing Customer', data:{}});
            return invoiced;
        }
        	
        var order_id = this.db.add_order(order.export_as_JSON());
        this.flush_mutex.exec(function(){
            var done = new $.Deferred(); // holds the mutex

            // send the order to the server
            // we have a 30 seconds timeout on this push.
            // FIXME: if the server takes more than 30 seconds to accept the order,
            // the client will believe it wasn't successfully sent, and very bad
            // things will happen as a duplicate will be sent next time
            // so we must make sure the server detects and ignores duplicated orders

            var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true});
            
            transfer.catch(function(error){
                invoiced.reject(error);
                done.reject();
            });

            // on success, get the order id generated by the server
            transfer.then(function(order_server_id){   
                invoiced.resolve();
                done.resolve();
            });

            return done;

        });

        return invoiced;
    },
    
    get_client: function() {
        var order = this.get_order();
        if (order) {
        	if(!order.get_client() && this.config.default_customer) {
        		var client = this.db.get_partner_by_id(this.config.default_customer[0]);
        		this.get_order().set_client(client);
        	}
            return order.get_client();
        }
        return null;
    },

});
*/
var _super_order = models.Order.prototype;

models.Order = models.Order.extend({
    
    initialize: function(attr, options) {
   
    	_super_order.initialize.call(this,attr,options);
        this.forma_pago_id = this.forma_pago_id || undefined;
        this.methodo_pago = this.methodo_pago || undefined;
        this.uso_cfdi_id = this.uso_cfdi_id || undefined;
    },
    set_forma_pago: function(forma_pago_id){
        this.forma_pago_id = forma_pago_id;
        this.trigger('change',this);
    },
    get_forma_pago: function(){
        return this.forma_pago_id;
    },
    set_methodo_pago: function(methodo_pago){
        this.methodo_pago = methodo_pago;
        this.trigger('change',this);
    },
    get_methodo_pago: function(){
        return this.methodo_pago;
    },
    set_uso_cfdi: function(uso_cfdi_id){
        this.uso_cfdi_id = uso_cfdi_id;
        this.trigger('change',this);
    },
    get_uso_cfdio: function(){
        return this.uso_cfdi_id;
    },
    clean_empty_paymentlines: function() {
    	var lines = this.paymentlines.models;
    	
		this.clear_journal_amount_dict = {};
    	for ( var i = 0; i < lines.length; i++) {
            if (!lines[i].get_amount()) {
            	this.clear_journal_amount_dict[lines[i].payment_method.id] = lines[i].get_amount();
            }
        }
    	
    	return _super_order.clean_empty_paymentlines.call(this);
    	
    },
    export_as_JSON: function(){
    	
        var json = _super_order.export_as_JSON.call(this);
        json.forma_pago_id = this.forma_pago_id;
        json.methodo_pago = this.methodo_pago;
        json.uso_cfdi_id = this.uso_cfdi_id;
        
        if (json.amount_return>0.0){
        	var journal_amount_dict = {};
        	var lines  = this.paymentlines.models;
            for (var i = 0; i < lines.length; i++) {
            	journal_amount_dict[lines[i].payment_method.id] = lines[i].get_amount();
            }
            if (this.clear_journal_amount_dict){
            	journal_amount_dict = [this.clear_journal_amount_dict, journal_amount_dict].reduce(function (r, o) {
                    Object.keys(o).forEach(function (k) { r[k] = o[k]; });
                    return r;
                }, {});
            }
            
            json.payment_line_journals= journal_amount_dict;
        }
        return json;
    },
    export_for_printing: function(){
   
    	var json = _super_order.export_for_printing.call(this);
    	var order = this.pos.get_order();
    	json.company.regimen_fiscal_id=this.pos.company.regimen_fiscal_id;
    	json.company.zip=this.pos.company.zip;
    	json.company.nombre_fiscal=this.pos.company.nombre_fiscal;
    	
    	if(order.invoice_information) {
    		json.regimen_fiscal_id = order.invoice_information.regimen_fiscal_id;
            json.tipo_comprobante = order.invoice_information.tipo_comprobante;
            json.folio_factura = order.invoice_information.folio_factura;
            json.client_name = order.invoice_information.client_name;
            json.client_rfc = order.invoice_information.client_rfc;
            json.uso_cfdi_id = order.invoice_information.uso_cfdi_id;
            json.methodo_pago = order.invoice_information.methodo_pago;
            json.regimen_fiscal_id = order.invoice_information.regimen_fiscal_id;
            json.forma_pago_id = order.invoice_information.forma_pago_id;
            json.numero_cetificado = order.invoice_information.numero_cetificado;
            json.moneda = order.invoice_information.moneda;
            json.cetificaso_sat = order.invoice_information.cetificaso_sat;
            json.tipocambio = order.invoice_information.tipocambio;
            json.folio_fiscal = order.invoice_information.folio_fiscal;
            json.fecha_certificacion = order.invoice_information.fecha_certificacion;
            json.cadena_origenal = order.invoice_information.cadena_origenal;
            json.selo_digital_cdfi = order.invoice_information.selo_digital_cdfi;
            json.selo_sat = order.invoice_information.selo_sat;
            json.invoice_id = order.invoice_information.invoice_id;
            return json;		
    	}
    	/*this.get_invoice_data = rpc.query({
            model: 'pos.order',
            method: 'get_invoice_information',
            args: [order.get_name()],
        }).then(function(res){
        		
        	if (order.is_to_invoice()){
	        	json.regimen_fiscal_id = res.regimen_fiscal_id;
	            json.tipo_comprobante = res.tipo_comprobante;
	            json.folio_factura = res.folio_factura;
	            json.client_name = res.client_name;
	            json.uso_cfdi_id = res.uso_cfdi_id;
	            json.methodo_pago = res.methodo_pago;
	            json.regimen_fiscal_id = res.regimen_fiscal_id;
	            json.forma_pago_id = res.forma_pago_id;
	            json.numero_cetificado = res.numero_cetificado;
	            json.moneda = res.moneda;
                json.cetificaso_sat = res.cetificaso_sat;
                json.tipocambio = res.tipocambio;
                json.folio_fiscal = res.folio_fiscal;
                json.fecha_certificacion = res.fecha_certificacion;
                json.cadena_origenal = res.cadena_origenal;
                json.selo_digital_cdfi = res.selo_digital_cdfi;
                json.selo_sat = res.selo_sat;
                return json;
        	}*/
            /*$('.pos-receipt-container').html(QWeb.render(template,{
                widget:self,
                order: order,
                receipt: order.export_for_printing(),
                orderlines: order.get_orderlines(),
                paymentlines: order.get_paymentlines(),
                invoice_id : res.invoice_id,
                tipo_comprobante : res.tipo_comprobante,
                invoice_date : res.invoice_date,
                folio_factura : res.folio_factura,
               
            }));
            
        },function(err,event){
            event.preventDefault();
            self.gui.show_popup('error',{
                'title': _t('Error'),
                'body': _t('Your Internet connection is probably down.'),
            });
        });*/
    	if (json.change>0.0){
        	var journal_amount_dict = {};
        	var lines  = this.paymentlines.models;
            for (var i = 0; i < lines.length; i++) {
            	journal_amount_dict[lines[i].payment_method.id] = lines[i].get_amount();
            }
            if (this.clear_journal_amount_dict){
            	journal_amount_dict = [this.clear_journal_amount_dict, journal_amount_dict].reduce(function (r, o) {
                    Object.keys(o).forEach(function (k) { r[k] = o[k]; });
                    return r;
                }, {});
            }
            json.payment_line_journals= journal_amount_dict;
        }
        return json;
    },
    init_from_JSON: function(json){
    	_super_order.init_from_JSON.apply(this,arguments);
        this.forma_pago_id = json.forma_pago_id;
        this.methodo_pago = json.methodo_pago;
        this.uso_cfdi_id = json.uso_cfdi_id;
    },
});
});
